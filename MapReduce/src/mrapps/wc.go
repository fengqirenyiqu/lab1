package main

import (
	"MapReduce/src/mr"
	"fmt"
	"strconv"
	"strings"
)

// Map 从Map接受的参数可以知道coordinator传给worker的值一个是filename，一个是文件的内容
//即coordinator读取完文件的内容再传给Map，而不是Map里面再读取这个文件的内容。
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.

	//split切分"\n"读取得到每一行,再切分" "来得到每个word
	//通过map读取的双参数中的bool判断参数是否已经存在，存在则该key的value+1

	// split contents into an array of words.
	words := strings.Fields(contents)
    collectmap := make(map[string]int)
	kva := []mr.KeyValue{}
	for _, w := range words {
		if _,p :=collectmap[w];p==true{
			collectmap[w]=collectmap[w]+1
		}else {
			collectmap[w]=1
		}
	}
	for key,value := range  collectmap{
		//不能确保顺序 后续需要优化
		kva=append(kva,mr.KeyValue{
			Key:key,
			Value:strconv.Itoa(value),
		})
	}
	fmt.Println(kva)
	return kva
}

// Reduce
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	value := 0
    for _,value_string := range values {
    	v,_ :=strconv.Atoi(value_string)
    	value +=v
	}
	return strconv.Itoa(value)
}